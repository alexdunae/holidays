# Chinese holiday definitions for the Ruby Holiday gem.
# CHANGES:
#  2016-03-13: Initial version by https://github.com/Eric-Guo
---
months:
  0:
  - name: 除夕
    regions: [cn]
    function: chinese_new_year_festival(year)-1
  - name: 春节
    regions: [cn]
    function: chinese_new_year_festival(year)
  - name: 年初二
    regions: [cn]
    function: chinese_new_year_festival(year)+1
  - name: 年初三
    regions: [cn]
    function: chinese_new_year_festival(year)+2
  - name: 年初四
    regions: [cn]
    function: chinese_new_year_festival(year)+3
  - name: 迎财神
    regions: [cn]
    function: chinese_new_year_festival(year)+4
  - name: 端午节
    regions: [cn]
    function: dragon_boat_festival(year)
  - name: 中秋节
    regions: [cn]
    function: moon_festival(year)
  1:
  - name: 元旦
    regions: [cn]
    mday: 1
  4:
  - name: 清明
    regions: [cn]
    function: cn_vernal_equinox_plus_15_day(year)
  5:
  - name: 劳动节
    regions: [cn]
    mday: 1
    observed: to_monday_if_weekend
  10:
  - name: 国庆节
    regions: [cn]
    mday: 1
  - name: 国庆假日第二天
    regions: [cn]
    mday: 2
  - name: 国庆假日第三天
    regions: [cn]
    mday: 3
  - name: 国庆假日第四天
    regions: [cn]
    mday: 4
  - name: 国庆假日第五天
    regions: [cn]
    mday: 5
  - name: 国庆假日第六天
    regions: [cn]
    mday: 6
  - name: 国庆假日第七天
    regions: [cn]
    mday: 7

methods:
  cn_vernal_equinox_plus_15_day: |
    # copy from jp, but need review as 2005-4-5 is correct 清明
    def self.cn_vernal_equinox_plus_15_day(year)
      day =
        case year
        when 1851..1899
          19.8277
        when 1900..1979
          20.8357
        when 1980..2099
          20.8431
        when 2100..2150
          21.8510
        else
          raise IndexError.new("Out of range")
        end
      day += 0.242194 * (year - 1980) - ((year - 1980)/4).floor
      day = day.floor
      Date.civil(year, 3, day)+15
    end
  chinese_new_year_festival: |
    def self.chinese_new_year_festival(year)
      Holidays::DateCalculator::LunisolarDate.to_solar(year, 1, 1)
    end
  dragon_boat_festival: |
    def self.dragon_boat_festival(year)
      to_weekday_if_weekend(Holidays::DateCalculator::LunisolarDate.to_solar(year, 5, 5))
    end
  moon_festival: |
    def self.moon_festival(year)
      to_weekday_if_weekend(Holidays::DateCalculator::LunisolarDate.to_solar(year, 8, 15))
    end
tests: |
  {Date.civil(2012,1,1) => '元旦',
   Date.civil(2016,2,7) => '除夕',
   Date.civil(2016,2,8) => '春节',
   Date.civil(2016,2,9) => '年初二',
   Date.civil(2016,2,10) => '年初三',
   Date.civil(2016,2,11) => '年初四',
   Date.civil(2016,2,12) => '迎财神',
   Date.civil(2016,4,4) => '清明',
   Date.civil(2016,6,9) => '端午节',
   Date.civil(2016,9,15) => '中秋节',
   Date.civil(1949,10,1) => '国庆节',
   Date.civil(2016,10,1) => '国庆节'
  }.each do |date, name|
     assert_equal name, (Holidays.on(date, :cn, :informal)[0] || {})[:name]
  end

  [Date.civil(2004,4,4), Date.civil(2005,4,4), Date.civil(2006,4,5),
   Date.civil(2007,4,5), Date.civil(2008,4,4), Date.civil(2009,4,4),
   Date.civil(2010,4,5)].each do |date|
    assert_equal '清明', Holidays.on(date, :cn)[0][:name]
  end

