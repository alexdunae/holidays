# encoding: utf-8
module Holidays
  # This file is generated by the Ruby Holidays gem.
  #
  # Definitions loaded: definitions/cn.yaml
  #
  # To use the definitions in this file, load it right after you load the
  # Holiday gem:
  #
  #   require 'holidays'
  #   require 'generated_definitions/cn'
  #
  # All the definitions are available at https://github.com/alexdunae/holidays
  module CN # :nodoc:
    def self.defined_regions
      [:cn]
    end

    def self.holidays_by_month
      {
              0 => [{:function => lambda { |year| Holidays.chinese_new_year_festival(year)-1 }, :function_id => "chinese_new_year_festival(year)-1", :name => "除夕", :regions => [:cn]},
            {:function => lambda { |year| Holidays.chinese_new_year_festival(year) }, :function_id => "chinese_new_year_festival(year)", :name => "春节", :regions => [:cn]},
            {:function => lambda { |year| Holidays.chinese_new_year_festival(year)+1 }, :function_id => "chinese_new_year_festival(year)+1", :name => "年初二", :regions => [:cn]},
            {:function => lambda { |year| Holidays.chinese_new_year_festival(year)+2 }, :function_id => "chinese_new_year_festival(year)+2", :name => "年初三", :regions => [:cn]},
            {:function => lambda { |year| Holidays.chinese_new_year_festival(year)+3 }, :function_id => "chinese_new_year_festival(year)+3", :name => "年初四", :regions => [:cn]},
            {:function => lambda { |year| Holidays.chinese_new_year_festival(year)+4 }, :function_id => "chinese_new_year_festival(year)+4", :name => "迎财神", :regions => [:cn]},
            {:function => lambda { |year| Holidays.dragon_boat_festival(year) }, :function_id => "dragon_boat_festival(year)", :name => "端午节", :regions => [:cn]},
            {:function => lambda { |year| Holidays.moon_festival(year) }, :function_id => "moon_festival(year)", :name => "中秋节", :regions => [:cn]}],
      1 => [{:mday => 1, :name => "元旦", :regions => [:cn]}],
      4 => [{:function => lambda { |year| Holidays.cn_vernal_equinox_plus_15_day(year) }, :function_id => "cn_vernal_equinox_plus_15_day(year)", :name => "清明", :regions => [:cn]}],
      5 => [{:mday => 1, :observed => lambda { |date| Holidays.to_monday_if_weekend(date) }, :observed_id => "to_monday_if_weekend", :name => "劳动节", :regions => [:cn]}],
      10 => [{:mday => 1, :name => "国庆节", :regions => [:cn]},
            {:mday => 2, :name => "国庆假日第二天", :regions => [:cn]},
            {:mday => 3, :name => "国庆假日第三天", :regions => [:cn]},
            {:mday => 4, :name => "国庆假日第四天", :regions => [:cn]},
            {:mday => 5, :name => "国庆假日第五天", :regions => [:cn]},
            {:mday => 6, :name => "国庆假日第六天", :regions => [:cn]},
            {:mday => 7, :name => "国庆假日第七天", :regions => [:cn]}]
      }
    end
  end

# copy from jp, but need review as 2005-4-5 is correct 清明
def self.cn_vernal_equinox_plus_15_day(year)
  day =
    case year
    when 1851..1899
      19.8277
    when 1900..1979
      20.8357
    when 1980..2099
      20.8431
    when 2100..2150
      21.8510
    else
      raise IndexError.new("Out of range")
    end
  day += 0.242194 * (year - 1980) - ((year - 1980)/4).floor
  day = day.floor
  Date.civil(year, 3, day)+15
end


def self.chinese_new_year_festival(year)
  Holidays::DateCalculator::LunisolarDate.to_solar(year, 1, 1)
end


def self.dragon_boat_festival(year)
  to_weekday_if_weekend(Holidays::DateCalculator::LunisolarDate.to_solar(year, 5, 5))
end


def self.moon_festival(year)
  to_weekday_if_weekend(Holidays::DateCalculator::LunisolarDate.to_solar(year, 8, 15))
end



end

Holidays.merge_defs(Holidays::CN.defined_regions, Holidays::CN.holidays_by_month)
